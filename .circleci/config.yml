version: 2.1

jobs:
  lint:
    docker:
      - image: cimg/node:18.4.0 
    steps:
      - checkout
      - run:
          name: install dependecies
          command: yarn
      - run: npm run lint
      - run: ls
      - save_cache:
          key: v1-deps-{{ checksum "yarn.lock" }}
          paths:
            - node_modules

  test:
      docker:
        - image: cimg/node:18.4.0 
      steps:
        - checkout
        - restore_cache:
            keys:
              - v1-deps-{{ checksum "yarn.lock" }}
        - run: ls
        - run: yarn
        - run: npm run test

  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: ls
      - run:
          name: Create Cloudformation Stack
          command: |
              aws cloudformation deploy \
                --template-file ./cloudFormation.yml \
                --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
                --region us-east-1
      - run: echo "[all]" > inventory
      - run:
          name: populate ansible inventory file
          command: |
              aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory

      # work space requires tar to be installed
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip

      - persist_to_workspace:
          root: ./
          paths:
            - "inventory"

  configure_infrastructure:
    docker:
      - image: python:3.9.13-alpine3.16
    steps: 
      - checkout
      - add_ssh_keys:
          fingerprints: ["a8:db:51:9a:82:49:74:d7:1b:35:99:f6:b5:5a:18:3f"] 
      - attach_workspace:
          at: ./
      - run:
         name: install ansible
         command: apk add --update ansible
      - run:
          name: run ansible playbook
          command: ansible-playbook -i inventory playbook.yml

  smoke-test:
    docker:
      - image: alphine
    steps:
      - run:
          name: test endpoint using curl
          command: |
            URL="https://blog.udacity.com/"
            # Test if website exists
            if curl -s --head ${URL} 
            then
              return 0
            else
              return 1
            fi


workflows:
  CI-workflow:
    jobs:
      # - lint
      # - test: 
      #     requires: 
      #     - lint
      # - create_infrastructure
      # - configure_infrastructure:
      #     requires:
      #     - create_infrastructure
      - smoke-test